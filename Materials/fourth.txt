youssef@joe:~$ cd DDS/
youssef@joe:~/DDS$ ls
first.beam  first.txt   second.beam  second.txt  third.erl
first.erl   fourth.erl  second.erl   third.beam  third.txt
youssef@joe:~/DDS$ erl
Erlang/OTP 27 [erts-15.0] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit:ns]

Eshell V15.0 (press Ctrl+G to abort, type help(). for help)
1> c(fourth).
fourth.erl:3:2: function inc_key/1 undefined
%    3| -export([inc_key/1]).
%     |  ^

fourth.erl:6:1: Warning: function inc_key/2 is unused
%    6| inc_key(Key, []) ->
%     | ^

fourth.erl:6:9: Warning: variable 'Key' is unused
%    6| inc_key(Key, []) ->
%     |         ^

error
2> c(fourth).
fourth.erl:6:9: Warning: variable 'Key' is unused
%    6| inc_key(Key, []) ->
%     |         ^

{ok,fourth}
3> c(fourth).
{ok,fourth}
4> c(fourth).
{ok,fourth}
5> c(fourth).
{ok,fourth}
6> PropList = [{orange, 2},{apple, 3}].
[{orange,2},{apple,3}]
7> fourth:inc_key(orange, PropList).
[{orange,3},{apple,3}]
8> fourth:inc_key(orangeeeee, PropList).
[{orange,2},{apple,3}]
9> c(fourth).
{ok,fourth}
10> fourth:inc_key(orange, PropList).
[{orange,3},{apple,3}]
11> [1, 2 | lists:seq(1, 20)].
[1,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
12> h(lists, seq, 2).

  seq(From, To)

  There is no documentation for seq(From, To,
  1)
ok
13> h(lists, seq, 2).

  seq(From, To)

  There is no documentation for seq(From, To,
  1)
ok
14> h(lists, seq, 1).
{error,function_missing}
15> h(lists, seq, 2).

  seq(From, To)

  There is no documentation for seq(From, To,
  1)
ok
16> h(lists, seq).

  seq(From, To)

  There is no documentation for seq(From, To,
  1)

  seq(From, To, Incr)

  Returns a sequence of integers that starts
  with From and contains the successive
  results of adding Incr to the previous
  element, until To is reached or passed (in
  the latter case, To is not an element of
  the sequence). Incr defaults to 1.
more (y/n)? (y) h(lists, seq, 2).
more (y/n)? (y) n
ok
17> h(lists, seq, 2).

  seq(From, To)

  There is no documentation for seq(From, To,
  1)
ok
18> h(lists, seq).

  seq(From, To)

  There is no documentation for seq(From, To,
  1)

  seq(From, To, Incr)

  Returns a sequence of integers that starts
  with From and contains the successive
  results of adding Incr to the previous
  element, until To is reached or passed (in
  the latter case, To is not an element of
  the sequence). Incr defaults to 1.
more (y/n)? (y) 

  Failures:

   • If To < From - Incr and Incr > 0.

   • If To > From - Incr and Incr < 0.

   • If Incr =:= 0 and From =/= To.

  The following equalities hold for all
  sequences:

    length(lists:seq(From, To)) =:= To - From + 1
    length(lists:seq(From, To, Incr)) =:= (To - From + Incr) div Incr
more (y/n)? (y) n
ok
19> [{orange, 1}].
[{orange,1}]
20> #{orange => 1}.
#{orange => 1}
21> Map = #{orange => 1, apple => 3}.
#{orange => 1,apple => 3}
22> L = [1, 2].
[1,2]
23> Map.
#{orange => 1,apple => 3}
24> L.
[1,2]
25> [3 | L ].
[3,1,2]
26> Map#{pear, 50}.
* 1:10: syntax error before: ','
26> Map#{pear => 50}.
#{orange => 1,apple => 3,pear => 50}
27> Map#{apple => 50}.
#{orange => 1,apple => 50}
28> Map.
#{orange => 1,apple => 3}
29> Map2 = Map#{pear => 50}.
#{orange => 1,apple => 3,pear => 50}
30> Map2.
#{orange => 1,apple => 3,pear => 50}
31> Map2#{apple => 50}.
#{orange => 1,apple => 50,pear => 50}
32> Map2.
#{orange => 1,apple => 3,pear => 50}
33> X = 1.
1
34> X = 2.
** exception error: no match of right hand side value 2
35> 1 = 2.
** exception error: no match of right hand side value 2
36> f(X).
ok
37> X = 2.
2
38> lists:seq(1,20).
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
39> Mod = lists.
lists
40> Fun = seq.
seq
41> Mod:Fun(1,20).
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
42> io:read("--> ").
--> 1.
{ok,1}
43> io:read("--> ").
--> 1 + .
{error,{1,erl_parse,["syntax error before: ","'.'"]}}
44> c(fourth).
{ok,fourth}
45> fourth:eval().
Module name> lists.
Function name> seq.
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
46> c(fourth).
{ok,fourth}
47> fourth:eval().
Module name> lists.
Function name> seq.
Argument list> [1,20].
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
48> processes().
[<0.0.0>,<0.1.0>,<0.2.0>,<0.3.0>,<0.4.0>,<0.5.0>,
 <0.6.0>,<0.7.0>,<0.8.0>,<0.11.0>,<0.43.0>,<0.45.0>,
 <0.46.0>,<0.47.0>,<0.49.0>,<0.50.0>,<0.51.0>,<0.52.0>,
 <0.53.0>,<0.55.0>,<0.57.0>,<0.58.0>,<0.59.0>,<0.60.0>,
 <0.61.0>,<0.62.0>,<0.63.0>,<0.64.0>,<0.65.0>|...]
49> length(processes()).
44
50> fourth:eval().
Module name> erlang.
Function name> processes.
Argument list> [].
[<0.0.0>,<0.1.0>,<0.2.0>,<0.3.0>,<0.4.0>,<0.5.0>,
 <0.6.0>,<0.7.0>,<0.8.0>,<0.11.0>,<0.43.0>,<0.45.0>,
 <0.46.0>,<0.47.0>,<0.49.0>,<0.50.0>,<0.51.0>,<0.52.0>,
 <0.53.0>,<0.55.0>,<0.57.0>,<0.58.0>,<0.59.0>,<0.60.0>,
 <0.61.0>,<0.62.0>,<0.63.0>,<0.64.0>,<0.65.0>|...]
51> fourth:eval().
Module name> erlang.
Function name> length.
Argument list> [].
** exception error: undefined function erlang:length/0
52> fourth:eval().
Module name> erlang.
Function name> length.
Argument list> [ [] ].
0
53> spawn(erlang, length, [[]]).
<0.174.0>
54> spawn(io, read, ["-->"]).
<0.176.0>
55> processes().
[<0.0.0>,<0.1.0>,<0.2.0>,<0.3.0>,<0.4.0>,<0.5.0>,
 <0.6.0>,<0.7.0>,<0.8.0>,<0.11.0>,<0.43.0>,<0.45.0>,
 <0.46.0>,<0.47.0>,<0.49.0>,<0.50.0>,<0.51.0>,<0.52.0>,
 <0.53.0>,<0.55.0>,<0.57.0>,<0.58.0>,<0.59.0>,<0.60.0>,
 <0.61.0>,<0.62.0>,<0.63.0>,<0.64.0>,<0.65.0>|...]
56> rp(processes()).
[<0.0.0>,<0.1.0>,<0.2.0>,<0.3.0>,<0.4.0>,<0.5.0>,
 <0.6.0>,<0.7.0>,<0.8.0>,<0.11.0>,<0.43.0>,<0.45.0>,
 <0.46.0>,<0.47.0>,<0.49.0>,<0.50.0>,<0.51.0>,<0.52.0>,
 <0.53.0>,<0.55.0>,<0.57.0>,<0.58.0>,<0.59.0>,<0.60.0>,
 <0.61.0>,<0.62.0>,<0.63.0>,<0.64.0>,<0.65.0>,<0.66.0>,
 <0.68.0>,<0.69.0>,<0.70.0>,<0.71.0>,<0.72.0>,<0.73.0>,
 <0.74.0>,<0.75.0>,<0.76.0>,<0.77.0>,<0.79.0>,<0.80.0>,
 <0.84.0>,<0.171.0>,<0.176.0>]
ok
57> exit(<0.176.0>, kill).
true
58> rp(processes()).
[<0.0.0>,<0.1.0>,<0.2.0>,<0.3.0>,<0.4.0>,<0.5.0>,
 <0.6.0>,<0.7.0>,<0.8.0>,<0.11.0>,<0.43.0>,<0.45.0>,
 <0.46.0>,<0.47.0>,<0.49.0>,<0.50.0>,<0.51.0>,<0.52.0>,
 <0.53.0>,<0.55.0>,<0.57.0>,<0.58.0>,<0.59.0>,<0.60.0>,
 <0.61.0>,<0.62.0>,<0.63.0>,<0.64.0>,<0.65.0>,<0.66.0>,
 <0.68.0>,<0.69.0>,<0.70.0>,<0.71.0>,<0.72.0>,<0.73.0>,
 <0.74.0>,<0.75.0>,<0.76.0>,<0.77.0>,<0.79.0>,<0.80.0>,
 <0.84.0>,<0.171.0>]
ok
59> self().
<0.171.0>
60> self() ! message.
message
61> receive 
      A -> A.
* 2:9: syntax error before: '.'
61> receive 
      A -> A
    end.
message
62> receive 
      A -> A
    end.
-->ok
   .

BREAK: (a)bort (A)bort with dump (c)ontinue (p)roc info (i)nfo
       (l)oaded (v)ersion (k)ill (D)b-tables (d)istribution
^Cyoussef@joe:~/DDS$ erl
Erlang/OTP 27 [erts-15.0] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit:ns]

Eshell V15.0 (press Ctrl+G to abort, type help(). for help)
1> receive
     A -> A
   end.

BREAK: (a)bort (A)bort with dump (c)ontinue (p)roc info (i)nfo
       (l)oaded (v)ersion (k)ill (D)b-tables (d)istribution
^Cyoussef@joe:~/DDS$ erl
Erlang/OTP 27 [erts-15.0] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit:ns]

Eshell V15.0 (press Ctrl+G to abort, type help(). for help)
1> self() ! ok. 
ok
2> receive
     [ ok | A ] -> A 
   end.

BREAK: (a)bort (A)bort with dump (c)ontinue (p)roc info (i)nfo
       (l)oaded (v)ersion (k)ill (D)b-tables (d)istribution
^Cyoussef@joe:~/DDS$ erl
Erlang/OTP 27 [erts-15.0] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit:ns]

Eshell V15.0 (press Ctrl+G to abort, type help(). for help)
1> self() ! ok.
ok
2> receive
     [ok | A] -> A;
     ok -> ok
   end.
ok
3> spawn(erlang, length, [[]]).
<0.89.0>
4> fun(X) -> X end.
#Fun<erl_eval.42.39164016>
5> fun(12).
* 1:8: syntax error before: '.'
5> Fun = fun(X) -> X end.
#Fun<erl_eval.42.39164016>
6> Fun(12).
12
7> Lambda = fun(X) when is_integer(X) -> {integer, X};
   (X) -> X
   end.
#Fun<erl_eval.42.39164016>
8> Lambda (12).
{integer,12}
9> Lambda ("").
[]
10> apply(Lambda, [12]).
{integer,12}
11> Main = self().
<0.85.0>
12> spawn(fun() -> Main ! erlang:length([]) end).
<0.100.0>
13> receive 
     M -> M
    end.
0
14> 
